<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#><#@
 output extension=".cs"#><#

CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this, 1);
MetadataTools ef = new MetadataTools(this);

string inputFile = @"Domain.edmx";
EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);
string namespaceName = code.VsNamespaceSuggestion();

EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);
WriteHeader(fileManager);

foreach (var entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
{
    fileManager.StartNewFile(entity.Name + ".cs");
    BeginNamespace(namespaceName, code);
#>
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Diagnostics;
using Infrastructure.Core.BaseClasses;

<#=Accessibility.ForType(entity)#> <#=code.SpaceAfter(code.AbstractOption(entity))#>partial class <#=code.Escape(entity)#><#=code.StringBefore(" : ", code.Escape(entity.BaseType))#><#WriteInherits(code, ef, entity);#>
{
<#
    var propertiesWithDefaultValues = entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity && p.DefaultValue != null);
    var collectionNavigationProperties = entity.NavigationProperties.Where(np => np.DeclaringType == entity && np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many);
    var complexProperties = entity.Properties.Where(p => p.TypeUsage.EdmType is ComplexType && p.DeclaringType == entity);
    var keyProperty = entity.Properties.FirstOrDefault(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity && ef.IsKey(p) && code.Escape(p.TypeUsage) == "int");

    if (propertiesWithDefaultValues.Any() || collectionNavigationProperties.Any() || complexProperties.Any())
    {
#>
   	[DebuggerStepThrough]
	public <#=code.Escape(entity)#>()
    {
<#
        foreach (var edmProperty in propertiesWithDefaultValues)
        {
#>
        this.<#=code.Escape(edmProperty)#> = <#=code.CreateLiteral(edmProperty.DefaultValue)#>;
<#
        }

        foreach (var navigationProperty in collectionNavigationProperties)
        {
#>
        this.<#=code.Escape(navigationProperty)#> = new HashSet<<#=code.Escape(navigationProperty.ToEndMember.GetEntityType())#>>();
<#
        }

        foreach (var complexProperty in complexProperties)
        {
#>
        this.<#=code.Escape(complexProperty)#> = new <#=code.Escape(complexProperty.TypeUsage)#>();
<#
        }
#>
    }

<#
    }

    var primitiveProperties = entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity);
    if (primitiveProperties.Any())
    {
        foreach (var edmProperty in primitiveProperties)
        {
			// BEGIN STUART MODIFY
#>

<#
			RequiredValidation(edmProperty);
			ConcurrencyAttribute(edmProperty);
			MaxLengthValidation(edmProperty);
			// END STUART MODIFY

            WriteProperty(code, edmProperty);
        }
    }
	
	if (keyProperty != null)
	{
#>

	
    /// <summary>
    /// Read only access to the primary key - used for Upserts
    /// </summary>
	public int PrimaryKeyValue
    {
        get
        {
            return <#=code.Escape(keyProperty)#>;
        }
    }
<#		
	}

    if (complexProperties.Any())
    {
#>

<#
        foreach(var complexProperty in complexProperties)
        {
            WriteProperty(code, complexProperty);
        }
    }

    var navigationProperties = entity.NavigationProperties.Where(np => np.DeclaringType == entity);
    if (navigationProperties.Any())
    {
#>

<#
        foreach (var navigationProperty in navigationProperties)
        {
            WriteNavigationProperty(code, navigationProperty);
        }
    }
#>
}
<#
    EndNamespace(namespaceName);
}

foreach (var complex in ItemCollection.GetItems<ComplexType>().OrderBy(e => e.Name))
{
    fileManager.StartNewFile(complex.Name + ".cs");
    BeginNamespace(namespaceName, code);
#>
using System;

<#=Accessibility.ForType(complex)#> partial class <#=code.Escape(complex)#>
{
<#
    var complexProperties = complex.Properties.Where(p => p.TypeUsage.EdmType is ComplexType && p.DeclaringType == complex);
    var propertiesWithDefaultValues = complex.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == complex && p.DefaultValue != null);

    if (propertiesWithDefaultValues.Any() || complexProperties.Any())
    {
#>
    public <#=code.Escape(complex)#>()
    {
<#
        foreach (var edmProperty in propertiesWithDefaultValues)
        {
#>
        this.<#=code.Escape(edmProperty)#> = <#=code.CreateLiteral(edmProperty.DefaultValue)#>;
<#
        }

        foreach (var complexProperty in complexProperties)
        {
#>
        this.<#=code.Escape(complexProperty)#> = new <#=code.Escape(complexProperty.TypeUsage)#>();
<#
        }
#>
    }

<#
    }

    var primitiveProperties = complex.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == complex);
    if (primitiveProperties.Any())
    {
        foreach(var edmProperty in primitiveProperties)
        {
			RequiredValidation(edmProperty);
			ConcurrencyAttribute(edmProperty);
			MaxLengthValidation(edmProperty);

            WriteProperty(code, edmProperty);
        }
    }

    if (complexProperties.Any())
    {
#>

<#
        foreach(var edmProperty in complexProperties)
        {
            WriteProperty(code, edmProperty);
        }
    }
#>
}
<#
    EndNamespace(namespaceName);
}

if (!VerifyTypesAreCaseInsensitiveUnique(ItemCollection))
{
    return "";
}

fileManager.Process();

#>
<#+
string GetResourceString(string resourceName)
{
	if(_resourceManager == null)
	{
		_resourceManager = new System.Resources.ResourceManager("System.Data.Entity.Design", typeof(System.Data.Entity.Design.MetadataItemCollectionFactory).Assembly);
	}
	
    return _resourceManager.GetString(resourceName, null);
}
System.Resources.ResourceManager _resourceManager;

void WriteHeader(EntityFrameworkTemplateFileManager fileManager)
{
    fileManager.StartHeader();
#>
//------------------------------------------------------------------------------
// <auto-generated>
// <#=GetResourceString("Template_GeneratedCodeCommentLine1")#>
//
// <#=GetResourceString("Template_GeneratedCodeCommentLine2")#>
// <#=GetResourceString("Template_GeneratedCodeCommentLine3")#>
// </auto-generated>
//------------------------------------------------------------------------------

<#+
    fileManager.EndBlock();
}

void BeginNamespace(string namespaceName, CodeGenerationTools code)
{
    CodeRegion region = new CodeRegion(this);
    if (!String.IsNullOrEmpty(namespaceName))
    {
#>
namespace <#=code.EscapeNamespace(namespaceName)#>
{
<#+
        PushIndent(CodeRegion.GetIndent(1));
    }
}


void EndNamespace(string namespaceName)
{
    if (!String.IsNullOrEmpty(namespaceName))
    {
        PopIndent();
#>
}
<#+
    }
}

void WriteProperty(CodeGenerationTools code, EdmProperty edmProperty)
{
    WriteProperty(Accessibility.ForProperty(edmProperty),
                  code.Escape(edmProperty.TypeUsage),
                  code.Escape(edmProperty),
                  code.SpaceAfter(Accessibility.ForGetter(edmProperty)),
                  code.SpaceAfter(Accessibility.ForSetter(edmProperty)));
}

void WriteNavigationProperty(CodeGenerationTools code, NavigationProperty navigationProperty)
{
    var endType = code.Escape(navigationProperty.ToEndMember.GetEntityType());
    WriteProperty(PropertyVirtualModifier(Accessibility.ForProperty(navigationProperty)),
                  navigationProperty.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many ? ("ICollection<" + endType + ">") : endType,
                  code.Escape(navigationProperty),
                  code.SpaceAfter(Accessibility.ForGetter(navigationProperty)),
                  code.SpaceAfter(Accessibility.ForSetter(navigationProperty)));
}

void WriteProperty(string accessibility, string type, string name, string getterAccessibility, string setterAccessibility)
{
#>
    <#=accessibility#> <#=type#> <#=name#> { <#=getterAccessibility#>get; <#=setterAccessibility#>set; }
<#+
}

// BEGIN Stuart Added

void WriteInherits(CodeGenerationTools code, MetadataTools ef, EntityType entity)
{
	bool hasIdentityConvention = entity.Properties.Any(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity && ef.IsKey(p) && code.Escape(p.TypeUsage) == "int");
	
	bool hasCreateDateConvention = entity.Properties.Any(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity && p.Name == "CreateDate" && code.Escape(p.TypeUsage) == "System.DateTime");
	bool hasUpdateDateConvention = entity.Properties.Any(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity && p.Name == "UpdateDate" && code.Escape(p.TypeUsage) == "Nullable<System.DateTime>");
	bool hasCreateUpdateDateConvention = hasCreateDateConvention && hasUpdateDateConvention;
	
	bool hasCreateUserConvention = entity.Properties.Any(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity && p.Name == "CreateUserId" && code.Escape(p.TypeUsage) == "int");
	bool hasUpdateUserConvention = entity.Properties.Any(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity && p.Name == "UpdateUserId" &&  code.Escape(p.TypeUsage) == "Nullable<int>");
	bool hasCreateUpdateUserConvention = hasCreateUserConvention && hasUpdateUserConvention;

	bool hasSoftDeleteConvention = entity.Properties.Any(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity && p.Name == "IsDeleted" && code.Escape(p.TypeUsage) == "bool");

	bool hasGuidTokenConvention = entity.Properties.Any(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity && p.Name == "Token" && code.Escape(p.TypeUsage) == "System.Guid");

	int numberConventionsRemaining = 0;
	if (hasIdentityConvention) numberConventionsRemaining++;
	if (hasCreateUpdateDateConvention) numberConventionsRemaining++;
	if (hasCreateUpdateUserConvention) numberConventionsRemaining++;
	if (hasSoftDeleteConvention) numberConventionsRemaining++;
	if (hasGuidTokenConvention) numberConventionsRemaining++;
	
	if (numberConventionsRemaining > 0)
	{
#> : <#+
	}
	
	if (hasIdentityConvention)
	{
		numberConventionsRemaining--;
#>IEntityIdentity<#+
	}

	if (numberConventionsRemaining > 0 && hasCreateUpdateDateConvention)
	{
#>, <#+
	}

	if (hasCreateUpdateDateConvention)
	{
		numberConventionsRemaining--;
#>IEntityCreateUpdateDate<#+
	}

	if (numberConventionsRemaining > 0 && hasCreateUpdateUserConvention)
	{
#>, <#+
	}
	
	if (hasCreateUpdateUserConvention)
	{
		numberConventionsRemaining--;
#>IEntityCreateUpdateUser<#+
	}
	
	if (numberConventionsRemaining > 0 && hasSoftDeleteConvention)
	{
#>, <#+
	}
	
	if (hasSoftDeleteConvention)
	{
		numberConventionsRemaining--;
#>IEntitySoftDelete<#+
	}
	
	if (numberConventionsRemaining > 0 && hasGuidTokenConvention)
	{
#>, <#+
	}
	
	if (hasGuidTokenConvention)
	{
		numberConventionsRemaining--;
#>IEntityGuidToken<#+
	}
#> 
<#+
	
}

void MaxLengthValidation(EdmProperty prop)
{
	var attrib = prop.TypeUsage.Facets.FirstOrDefault(p=>p.Name == "MaxLength");
	if (attrib != null)
		{
			string aVal = GetAttributeValue(attrib);
			if (!(aVal == "Max" | aVal == "" | prop.TypeUsage.EdmType.Name == "Binary"))
				{
					#><#="	[StringLength(" + aVal + ")]" + System.Environment.NewLine#><#+				
				}
		}
}


bool IsMaxLengthField(EdmProperty prop)
{
	var attrib = prop.TypeUsage.Facets.FirstOrDefault(p=>p.Name == "MaxLength");
	if (attrib != null)
		{
			string aVal = GetAttributeValue(attrib);
			if (!(aVal == "Max" | aVal == "" | prop.TypeUsage.EdmType.Name == "Binary"))
				{
					return true;			
				}
		}
		
	return false;
}

void RequiredValidation(EdmProperty prop)
{
	if(IsRequiredField(prop)){
					#><#="	[Required]" + System.Environment.NewLine#><#+				
		}
}

bool IsRequiredField(EdmProperty prop)
{
	var attrib = prop.TypeUsage.Facets.FirstOrDefault(p=>p.Name == "Nullable");
	return (attrib != null && GetAttributeValue(attrib) == "False");
}
	
	
void ConcurrencyAttribute(EdmProperty prop)
{
	var attrib = prop.TypeUsage.Facets.FirstOrDefault(p=>p.Name == "ConcurrencyMode");
	if (attrib != null && GetAttributeValue(attrib) == "Fixed")
		{
			string aVal = GetAttributeValue(attrib);
					#><#="	[ConcurrencyCheck]" + System.Environment.NewLine#><#+				
					#><#="	[UIHint(\"Hidden\")]" + System.Environment.NewLine#><#+				
		}
}
//EditableAttribute
//TimestampAttribute
// Also generate buddy classes (to allow custom validation?)
string GetAttributeValue(Facet attrib)
{
	var aVal = attrib.Value;
	return Convert.ToString(aVal);
}

// END STUART MODIFY



string PropertyVirtualModifier(string accessibility)
{
    return accessibility + (accessibility != "private" ? " virtual" : "");
}

bool VerifyTypesAreCaseInsensitiveUnique(EdmItemCollection itemCollection)
{
    var alreadySeen = new Dictionary<string, bool>(StringComparer.OrdinalIgnoreCase);
    foreach(var type in itemCollection.GetItems<StructuralType>())
    {
        if (!(type is EntityType || type is ComplexType))
        {
            continue;
        }

        if (alreadySeen.ContainsKey(type.FullName))
        {
            Error(String.Format(CultureInfo.CurrentCulture, "This template does not support types that differ only by case, the types {0} are not supported", type.FullName));
            return false;
        }
        else
        {
            alreadySeen.Add(type.FullName, true);
        }
    }

    return true;
}
#>
